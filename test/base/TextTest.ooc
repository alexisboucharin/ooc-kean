use ooc-base
use ooc-unit
use ooc-math
import math

TextTest: class extends Fixture {
	init: func {
		super("Text")
		this add("constructors", func {
			t := Text new(c"test string", 5)
			expect(t toString() == "test ")
			t = Text new("string")
			t2 := Text new("str")
			expect(t count == 6)
			expect(t toString() == "string")
			expect(t isEmpty == false)
			t = t give()
			t free()
			expect(t count == 0)
			expect(t isEmpty)
		})
		this add("ownership", func {
			t := Text new(c"vidhance", 8)
			t free()
			expect(t count == 8)
			t take()
			t free()
			expect(t count == 0)
			t = Text new(c"a string", 8)
			t free()
			expect(t isEmpty == false)
			t = t give()
			t free()
			expect(t isEmpty)
		})
		this add("searching", func {
			t := Text new("test string")
			t2 := Text new("test")
			expect(t endsWith(t))
			expect(t beginsWith(t))
			expect(t endsWith(t2) == false)
			expect(t beginsWith(t2))
			expect(t2 beginsWith(t2))
			expect(t[0] == 't')
			expect(t[1] == 'e')
			expect(t find('t') == 0)
			expect(t find('e') == 1)
			expect(t find('t', 1) == 3)
			expect(t find('x') == -1)
			expect(t find(t) == 0)
			expect(t find(Text new("test")) == 0)
			expect(t find(Text new("est")) == 1)
			expect(t find("st") == 2)
			expect(t find(Text new("st"), 4) == 5)
			expect(t find("string") == 5)
			expect(t find(Text new("bad")) == -1)
		})
		this add("slicing", func {
			t := Text new(c"text to slice", 13)
			expect(t == t copy())
			expect(t == t slice(0, t count))
			expect(t slice(0, 4) == Text new(c"text", 4))
			expect(t slice(8, 5) == Text new(c"slice", 5))
			expect(t slice(40, 23) isEmpty)
			expect(t slice(-2, -2) == "li")
			expect(t[0 .. 2] == "tex")
			expect(t[0 .. 123] == t)
			expect(t[123 .. 998] isEmpty)
		})
		this add("splitting", func {
			t := Text new("0,1,2,3,4")
			parts := t split(',')
			expect(parts count == 5)
			expect(parts[0] == "0")
			expect(parts[1] == "1")
			expect(parts[2] == "2")
			expect(parts[3] == "3")
			expect(parts[4] == "4")
			t = Text new(";;;0;;1;;;2;;3;")
			parts = t split(";")
			expect(parts count == 4)
			expect(parts[0] == "0")
			expect(parts[1] == "1")
			expect(parts[2] == "2")
			expect(parts[3] == "3")
			t = Text new("</br>simple</br>text</br></br>to</br>split")
			parts = t split(Text new(c"</br>", 5))
			expect(parts count == 4)
			expect(parts[0] == "simple")
			expect(parts[1] == "text")
			expect(parts[2] == "to")
			expect(parts[3] == "split")
		})
		this add("converting to integer", func {
			expect(Text new("1") toInt() == 1)
			expect(Text new("-1") toInt() == -1)
			expect(Text new("-932") toInt() == -932)
			expect(Text new("871") toInt() == 871)
			expect(Text new("bad") toInt() == 0)
			expect(Text new("bad") toInt~inBase(16) == 11 * 16 * 16 + 10 * 16 + 13)
			expect(Text new("123one") toInt() == 123)
			expect(Text new("101") toInt() == 101)
			expect(Text new("101") toInt~inBase(2) == 5)
			expect(Text new("101") toInt~inBase(8) == 8 * 8 + 1)
			expect(Text new("101") toInt~inBase(7) == 7 * 7 + 1)
			expect(Text new("654") toInt~inBase(6) == 0)
			expect(Text new("654") toInt~inBase(7) == 4 + 5 * 7 + 6 * 7 * 7)
			expect(Text new("BEEF") toInt() == 0)
			expect(Text new("BEEF") toInt~inBase(16) == 48879)
			expect(Text new("BEEF") toInt~inBase(16) == Text new("beef") toInt~inBase(16))
			expect(Text new("0xff") toInt() == 255)
			expect(Text new("0x11") toInt() == 17)
			expect(Text new("0xAA") toInt() == 170)
			expect(Text new("0xffZZZ") toInt() == 255)
			expect(Text new("0xDEADBEEF") toULong() == 3735928559)
			expect(Text new(INT_MAX toString()) toLong() == INT_MAX)
			expect(Text new("-9") toULong() == 0)
			expect(Text new("-9") toLLong() == -9)
			expect(Text new("-9") toLong() == -9)
			for (i in 1 .. 100)
				for (j in 1 .. 100)
					expect(Text new((i * j) toString()) toInt() == i * j)
		})
		this add("converting to float", func {
			expect(Text new("1") toFloat() == 1.0f)
			expect(Text new("-1.0") toFloat() == -1.0f)
			expect(Text new("-1.") toFloat() == -1.0f)
			expect(Text new("22.5") toFloat() == 22.5f)
			expect(Text new("123.763") toFloat() == 123.763f)
			expect(Text new("1e0") toFloat() == 1.0f)
			expect(Text new("5E-2") toFloat() == 0.05f)
			expect(Text new("2E12") toLDouble() == 2.0 * pow(10, 12))
			expect(Text new("6.5E5") toFloat() == 6.5 * pow(10, 5))
			expect(Text new("-34.5E-2") toFloat() == -0.345)
			for (i in 1 .. 100)
				for (j in 1 .. 100)
					expect(Text new((0.5f * i * j) toString()) toFloat() == 0.5f * i * j)
		})
	}
}

TextTest new() run()
